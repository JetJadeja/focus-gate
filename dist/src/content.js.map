{
  "version": 3,
  "sources": ["../../build/blob_animation.js", "../../build/storage.js", "../../build/util.js", "../../build/content.js"],
  "sourcesContent": ["class BlobElement {\n    constructor(x, y, r) {\n        this.fill = '#A6B1CE';\n        this.x = this.originalX = x;\n        this.y = this.originalY = y;\n        this.r = r || 10;\n        this.element = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        // set styling\n        this.element.setAttribute('r', this.r.toString());\n        this.element.setAttribute('style', `fill: ${this.fill};`);\n    }\n    // update element\n    update(mouseX, mouseY, repulsion, attraction) {\n        const dx = this.x - mouseX;\n        const dy = this.y - mouseY;\n        const angle = Math.atan2(dy, dx);\n        const dist = repulsion / Math.sqrt(dx * dx + dy * dy);\n        this.x += Math.cos(angle) * dist;\n        this.y += Math.sin(angle) * dist;\n        this.x += (this.originalX - this.x) * attraction;\n        this.y += (this.originalY - this.y) * attraction;\n        this.element.setAttribute('cx', this.x.toString());\n        this.element.setAttribute('cy', this.y.toString());\n    }\n}\nexport default class BlobAnimation {\n    constructor() {\n        this.config = {\n            blur: 8,\n            alphaMult: 30,\n            alphaAdd: -10,\n            numSeeds: 8,\n            childrenPerSeed: 3,\n            childrenDistanceRange: 100,\n            circleMinRadius: 15,\n            circleMaxRadius: 75,\n            attraction: 0.1,\n            repulsion: 1000,\n        };\n        this.animate = () => {\n            requestAnimationFrame(this.animate);\n            this.elements.forEach((e) => {\n                e.update(this.mouseX, this.mouseY, this.config.repulsion, this.config.attraction);\n            });\n        };\n        // grab dom elements\n        this.svg = document.getElementById('svg');\n        this.colorMatrixF = document.getElementById('colorMatrixF');\n        // bind event listeners\n        const body = document.getElementById('reflect-main');\n        window.addEventListener('resize', this.onResize, false);\n        body.addEventListener('mousemove', (e) => {\n            this.mouseX = e.clientX;\n            this.mouseY = e.clientY;\n        }, false);\n        body.addEventListener('mouseleave', this.resetMouse, false);\n        // create initial svg g elements\n        this.onResize();\n        this.resetMouse();\n        this.initElements();\n        this.colorMatrixF.setAttribute('values', `1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 ${this.config.alphaMult} ${this.config.alphaAdd}`);\n    }\n    random(min, max) {\n        return min + Math.random() * (max - min);\n    }\n    randomRange(targ, range) {\n        return targ + (Math.random() * 2 - 1) * range;\n    }\n    initElements() {\n        // create group div with namespace\n        this.elements = [];\n        const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.svg.appendChild(group);\n        // create seeds\n        for (let i = 0; i < this.config.numSeeds; i++) {\n            const e = new BlobElement(this.randomRange(this.centerX, this.width * 0.4), this.randomRange(this.centerY, this.height * 0.4), this.random(this.config.circleMinRadius, this.config.circleMaxRadius));\n            e.update(this.mouseX, this.mouseY, this.config.repulsion, this.config.attraction);\n            group.appendChild(e.element);\n            this.elements.push(e);\n        }\n        // add children to seeds\n        this.elements.forEach((e) => {\n            for (let j = 0; j < this.config.childrenPerSeed; j++) {\n                const child = new BlobElement(this.randomRange(e.x, this.config.childrenDistanceRange), this.randomRange(e.y, this.config.childrenDistanceRange), this.random(this.config.circleMinRadius, this.config.circleMaxRadius));\n                child.update(this.mouseX, this.mouseY, this.config.repulsion, this.config.attraction);\n                group.appendChild(child.element);\n                this.elements.push(child);\n            }\n        });\n    }\n    // set mouse cords back to bottom centre screen\n    resetMouse() {\n        this.mouseX = this.centerX;\n        this.mouseY = 5 * this.centerY;\n    }\n    // recompute width, height, and centre\n    onResize() {\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.centerX = this.width / 2;\n        this.centerY = this.height / 2;\n    }\n}\n", "// helper function to retrive chrome storage object\n// usage:\n//\n// getStorage(null).then(storage => {\n//     ...\n// })\nexport function getStorage() {\n    return new Promise((resolve, reject) => {\n        chrome.storage.sync.get(null, (storage) => {\n            if (chrome.runtime.lastError !== undefined) {\n                reject(chrome.runtime.lastError);\n            }\n            else {\n                resolve(storage);\n            }\n        });\n    });\n}\n// helper function to set fields in chrome storage\n// usage:\n//\n// getStorage({enableBlobs: false}).then(storage => {\n//     ...\n// })\nexport function setStorage(key) {\n    return new Promise((resolve, reject) => {\n        chrome.storage.sync.set(key, () => {\n            if (chrome.runtime.lastError !== undefined) {\n                reject(chrome.runtime.lastError);\n            }\n            else {\n                resolve();\n            }\n        });\n    });\n}\n", "export function addMinutes(date, minutes) {\n    return new Date(date.getTime() + minutes * 60000);\n}\nexport function cleanDomain(urls) {\n    // check to see if urls exist\n    if (urls[0] === undefined) {\n        // return empty if not\n        return '';\n    }\n    else {\n        // regex match for url\n        const activeURL = urls[0].match(/^[\\w]+:\\/{2}([\\w\\.:-]+)/);\n        // no matching sites, return empty\n        if (activeURL == null) {\n            return '';\n        }\n        else {\n            // strip www.\n            return activeURL[1].replace('www.', '');\n        }\n    }\n}\n", "import BlobAnimation from './blob_animation';\nimport { getStorage } from './storage';\nimport { cleanDomain } from './util';\n// some colour definitions\nconst REFLECT_INFO = '#576ca8';\nconst REFLECT_ERR = '#ff4a47';\n// as soon as page loads, check if we need to block it\ncheckIfBlocked();\n// re-check page everytime this page gets focus again\nwindow.addEventListener('focus', checkIfBlocked);\n// check to see if the current website needs to be blocked\nfunction checkIfBlocked() {\n    // if already on reflect page, don't need to re-block\n    if (!!document.getElementById('reflect-main') === false) {\n        getStorage().then((storage) => {\n            if (storage.isEnabled) {\n                const strippedURL = getStrippedUrl();\n                // match current url against stored blocklist\n                storage.blockedSites.forEach((site) => {\n                    if (strippedURL.includes(site) && !isWhitelistedWrapper()) {\n                        // found a match, check if currently on whitelist\n                        iterWhitelist();\n                    }\n                });\n            }\n        });\n    }\n}\n// display a message under intent entry field\nfunction displayStatus(message, duration = 3000, colour = REFLECT_INFO) {\n    $('#statusContent').css('color', colour);\n    $('#statusContent').text(message);\n    $('#statusContent').show().delay(duration).fadeOut();\n}\n// check to see if domain is whitelisted\nfunction isWhitelistedWrapper() {\n    const WHITELISTED_WRAPPERS = ['facebook.com/flx', 'l.facebook.com'];\n    // check if any wrapper urls are present in current url\n    return WHITELISTED_WRAPPERS.some((wrapper) => window.location.href.includes(wrapper));\n}\n// thin wrapper around util.ts/cleanDomain\nfunction getStrippedUrl() {\n    return cleanDomain([window.location.href]);\n}\nfunction iterWhitelist() {\n    // iterate whitelisted sites\n    getStorage().then((storage) => {\n        const strippedURL = getStrippedUrl();\n        if (strippedURL != '') {\n            // get dictionary of whitelisted sites\n            const whitelist = storage.whitelistedSites;\n            // is current url whitelisted?\n            if (whitelist.hasOwnProperty(strippedURL)) {\n                // check whitelist period is expired\n                const parsedDate = new Date(whitelist[strippedURL]);\n                const currentDate = new Date();\n                const expired = currentDate >= parsedDate;\n                if (expired) {\n                    loadBlockPage(strippedURL);\n                }\n                else {\n                    const timeDifference = parsedDate.getTime() - currentDate.getTime();\n                    // set timer to re-block page after whitelist period expires\n                    setTimeout(() => {\n                        loadBlockPage(strippedURL);\n                    }, timeDifference);\n                }\n            }\n            else {\n                loadBlockPage(strippedURL);\n            }\n        }\n    });\n}\n// replace current page with reflect block page\nfunction loadBlockPage(strippedURL) {\n    const prompt_page_url = chrome.runtime.getURL('res/pages/prompt.html');\n    const options_page_url = chrome.runtime.getURL('res/pages/options.html');\n    getStorage().then((enableBlobs) => {\n        // get prompt page content\n        $.get(prompt_page_url, (page) => {\n            // stop current page and replace with our blocker page\n            window.stop();\n            $('html').html(page);\n            addFormListener(strippedURL);\n            $('#linkToOptions').attr('href', options_page_url);\n            if ((enableBlobs !== null && enableBlobs !== void 0 ? enableBlobs : true)) {\n                const anim = new BlobAnimation();\n                anim.animate();\n            }\n        });\n    });\n}\nfunction addFormListener(strippedURL) {\n    var _a;\n    const form = document.forms.namedItem('inputForm');\n    // add listener for form submit\n    (_a = form) === null || _a === void 0 ? void 0 : _a.addEventListener('submit', (event) => {\n        // prevent default submit\n        event.preventDefault();\n        // extract entry\n        const intentForm = event.target;\n        const intent = new FormData(intentForm).get('intent');\n        const intentString = intent.toString();\n        const intentDate = new Date();\n        callBackgroundWithIntent(intentString);\n        addToStorage(intentString, intentDate, strippedURL);\n    });\n}\nfunction addToStorage(intentString, intentDate, url) {\n    chrome.storage.sync.get(null, (storage) => {\n        // getting intent list map from storage\n        let intentList = storage.intentList;\n        // getting oldest date value from intent list map\n        let oldest_date = new Date();\n        for (const rawDate in intentList) {\n            const date = new Date(rawDate);\n            if (date < oldest_date) {\n                oldest_date = date;\n            }\n        }\n        // deleting oldest intent to keep intent count under 20\n        if (Object.keys(intentList).length > storage.numIntentEntries) {\n            console.log(`list full, popping ${oldest_date.toJSON()}`);\n            delete intentList[oldest_date.toJSON()];\n        }\n        // adding new intent and date to intent list\n        intentList[intentDate.toJSON()] = {\n            intent: intentString,\n            url: url,\n        };\n        // saving intentList to chrome storage\n        chrome.storage.sync.set({ intentList: intentList }, () => {\n            console.log('the intent \"' + intentString + '\" has been added');\n        });\n    });\n}\nfunction callBackgroundWithIntent(intent) {\n    // open connection to runtime (background.ts)\n    const port = chrome.runtime.connect({\n        name: 'intentStatus',\n    });\n    port.postMessage({ intent: intent, url: window.location.href });\n    port.onMessage.addListener((msg) => {\n        switch (msg.status) {\n            case 'ok':\n                // show success message\n                // optional: transition?\n                chrome.storage.sync.get(null, (storage) => {\n                    const WHITELIST_PERIOD = storage.whitelistTime;\n                    displayStatus(`got it! ${WHITELIST_PERIOD} minutes starting now.`, 3000, REFLECT_INFO);\n                    location.reload();\n                });\n                break;\n            case 'too_short':\n                $('#inputFields').effect('shake', { times: 3, distance: 5 });\n                // display message\n                displayStatus('your response is a little short. be more specific!', 3000, REFLECT_ERR);\n                $('#textbox').val('');\n                break;\n            case 'invalid':\n                $('#inputFields').effect('shake', { times: 3, distance: 5 });\n                // display message\n                displayStatus(\"that doesn't seem to be productive. try being more specific.\", 3000, REFLECT_ERR);\n                // clear input\n                $('#textbox').val('');\n                break;\n        }\n        // close connection\n        port.disconnect();\n    });\n}\n"],
  "mappings": "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",
  "names": []
}
